{"version":3,"sources":["components/header.jsx","mock.js","utils.js","components/card.jsx","const.js","components/main.jsx","reducer.js","components/footer.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["Header","className","getRandomInt","min","max","Math","floor","random","count","generateFlight","dateFlight","start","Date","end","getTime","flight","pinType","pin","timeFlight","timeBlock","timeNight","timeBiologicalNight","timeWork","type","takeoff","name","lat","long","landing","flights","Array","fill","map","sort","a","b","getUniqValues","isYear","list","getFullYear","getMonth","Set","Card","props","data","activeYear","Main","state","value","this","id","htmlFor","onChange","e","setState","target","yearsList","getUniqYears","year","key","flightsCopy","slice","flightsByYear","filter","Number","getSum","it","reduce","getFilteredFlights","goalArr","from","find","console","log","reverse","getFlightsByActive","React","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAiBeA,G,kBAfA,WACb,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aAAf,UAGA,yBAAKA,UAAU,aAAf,c,4BCLR,SAASC,EAAaC,EAAKC,GACzB,OAAOC,KAAKC,MAAMH,EAAME,KAAKE,UAAYH,EAAM,EAAID,IAGrD,IAAyBK,EAInBC,EAAiB,iBAAO,CAC5BC,YAbqBC,EAaK,IAAIC,KAAK,KAAM,EAAG,GAbhBC,EAaoB,IAAID,KAZ7C,IAAIA,KAAKD,EAAMG,UAAYT,KAAKE,UAAYM,EAAIC,UAAYH,EAAMG,aAazEC,OAAO,QAAD,OAAUb,EAAa,GAAG,KAChCc,QAAQ,SAAD,OAAWd,EAAa,IAAI,MACnCe,IAAI,QACJC,WAAYhB,EAAa,KAAM,MAC/BiB,UAAWjB,EAAa,KAAM,MAC9BkB,UAAWlB,EAAa,KAAM,MAC9BmB,oBAAqBnB,EAAa,KAAM,MACxCoB,SAAUpB,EAAa,KAAM,MAC7BqB,KAAMrB,EAAa,EAAE,GACrBsB,QAAS,CACPC,KAAK,oFAAD,OAAqBvB,EAAa,EAAE,KACxCwB,IAAK,MACLC,KAAM,MAERC,QAAS,CACPH,KAAK,4GACLC,IAAK,YACLC,KAAM,eA/BV,IAAuBhB,EAAOE,GAmCjBgB,GA3BYrB,EA2Bc,GA1B9B,IAAIsB,MAAMtB,GAAOuB,KAAjB,IAA0BC,IAAIvB,IA0BIwB,MAAK,SAACC,EAAEC,GAAH,OAAOA,EAAEzB,WAAawB,EAAExB,c,OC7B3D0B,EAAgB,SAACP,GAA6B,IAApBQ,EAAmB,wDAClDC,EAAOT,EACVG,KAAI,SAACjB,GAGJ,OADAsB,EAAkBtB,EAAOL,WAAW6B,cAAyBxB,EAAOL,WAAW8B,cAGnF,OAAO,YAAI,IAAIC,IAAIH,KCcNI,EAvBF,SAACC,GAAU,IACfC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,WAENnC,EAA+CkC,EAA/ClC,WAAYY,EAAmCsB,EAAnCtB,SAAUJ,EAAyB0B,EAAzB1B,WAAYC,EAAayB,EAAbzB,UAEzC,OACE,wBAAIlB,UAAU,mBACZ,wBAAIA,UAAU,cCXI,gDDYf4C,EAA6BnC,EAAW6B,cDIV,CAAC,qBAAD,wOCJuC7B,EAAW8B,aAEnF,wBAAIvC,UAAU,cACXkB,GAEH,wBAAIlB,UAAU,cACXqB,GAEH,wBAAIrB,UAAU,cACXiB,KEuCM4B,E,kDApDb,WAAYH,GAAO,IAAD,8BAChB,cAAMA,IAEDI,MAAQ,CACXC,MAAM,+CAJQ,E,qDAQT,IAAD,OACN,OACE,0BAAM/C,UAAU,QACd,wBAAIA,UAAU,eAAd,iRDnBgB,gDCqBbgD,KAAKF,MAAMC,MAAX,8DAAsDC,KAAKF,MAAMC,MAAjE,wBAEH,yBAAK/C,UAAU,yBACb,2BAAOA,UAAU,cAAcsB,KAAK,WAAW2B,GAAG,aAClD,2BAAOjD,UAAU,cAAckD,QAAQ,YAAvC,gDAEF,yBAAKlD,UAAU,mBACb,4BAAQ+C,MAAOC,KAAKF,MAAMC,MAAO/C,UAAU,eAAemD,SAAU,SAACC,GAAK,EAAKC,SAAS,CAACN,MAAOK,EAAEE,OAAOP,UACvG,gCD7BY,+CFAI,SAACnB,GAC3B,IAAM2B,EAAY3B,EACfG,KAAI,SAACjB,GAAD,OAAUA,EAAOL,WAAW6B,iBACnC,OAAO,YAAI,IAAIE,IAAIe,IG6BRC,CAAa5B,GAASG,KAAI,SAAC0B,GAAD,OAAU,4BAAQC,IAAKD,GAC/CA,OAGL,wBAAIzD,UAAU,cAEZ,wBAAIA,UAAU,cAAd,aAGA,wBAAIA,UAAU,cAAd,oBAGA,wBAAIA,UAAU,cAAd,wBCxCsB,SAAC4B,EAASkB,GAC1C,IAAMa,EAAc/B,EAAQgC,QACtBC,EAAgBF,EAAYG,QAAO,SAAChD,GAAD,OAAWA,EAAOL,WAAW6B,gBAAkByB,OAAOjB,MAEzFkB,EAAS,SAACjB,EAAOzB,GAWrB,OAVYqC,EACXG,QAAO,SAAChD,GAGP,OADAiC,EAAQ,GAAcjC,EAAOL,WAAW6B,cAAyBxB,EAAOL,WAAW8B,cACjEQ,KAEnBhB,KAAI,SAACkC,GAAD,OAAOA,EAAG3C,MACd4C,QAAO,SAACjC,EAAGC,GACV,OAAOD,EAAIC,MAKTiC,EAAqB,WAAqB,IAC1CC,EADsBhC,EAAmB,wDAG7C,OADSgC,EAAThC,EAAmBuB,EAAwBE,EACpChC,MAAMwC,KAAKlC,EAAciC,EAAShC,IAASL,KAAI,SAACgB,GACrD,MAAO,CACLtC,WAAY2D,EAAQE,MAAK,SAACxD,GAGxB,OADAsB,EAAkBtB,EAAOL,WAAW6B,cAAyBxB,EAAOL,WAAW8B,cAC/DQ,KACftC,WACHY,SAAU2C,EAAOjB,EAAD,YAChB9B,WAAY+C,EAAOjB,EAAD,cAClB7B,UAAW8C,EAAOjB,EAAD,kBAKvB,MFvCsB,gDEuCnBD,EACMqB,GAAmB,IAE5BI,QAAQC,IAAIL,GAAmB,IACxBA,GAAmB,GAAOM,WDM1BC,CAAmB9C,EAASoB,KAAKF,MAAMC,OAAOhB,KAAI,SAACY,GAAD,OACnD,kBAAC,EAAD,CACEe,IAAKf,EAAKlC,WACVkC,KAAMA,EACNC,WAAY,EAAKE,MAAMC,gB,GA9Cd4B,IAAMC,WEOVC,EAZA,WACb,OACE,4BAAQ7E,UAAU,UAChB,wBAAIA,UAAU,gBACZ,wBAAIA,UAAU,gBAAd,eACA,wBAAIA,UAAU,gBAAd,2FACA,wBAAIA,UAAU,gBAAd,uCCSO8E,EAVH,WACV,OACE,yBAAK9E,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAc+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.6cc0b9ef.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <nav className=\"nav\">\n        <div className=\"nav__logo\">\n          [Logo]\n        </div>\n        <div className=\"nav__menu\">\n          [Menu]\n        </div>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;\n","function getRandomDate(start, end) {\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n};\n\nfunction getRandomInt(min, max) {  \n  return Math.floor(min + Math.random() * (max + 1 - min));\n};\n\nconst generateFlights = (count) => {\n  return new Array(count).fill(``).map(generateFlight);\n};\n\nconst generateFlight = () => ({\n  dateFlight: getRandomDate(new Date(2010, 0, 1), new Date()),\n  flight: `AB-33${getRandomInt(10,80)}`,\n  pinType: `B-757-${getRandomInt(100,200)}`,\n  pin: `XXXAK`,\n  timeFlight: getRandomInt(25000,26000),\n  timeBlock: getRandomInt(27000,28000),\n  timeNight: getRandomInt(15000,16000),\n  timeBiologicalNight: getRandomInt(28000,29000),\n  timeWork: getRandomInt(37000,38000),\n  type: getRandomInt(0,1),\n  takeoff: {\n    name: `Томск(Богашево)-${getRandomInt(1,20)}`,\n    lat: 56.55,\n    long: 85.2,\n  },\n  landing: {\n    name: `Нячанг(Камрань Интл)`,\n    lat: 11.99805555,\n    long: 109.21944444,\n  },\n});\n\nexport const flights = generateFlights(10).sort((a,b)=>b.dateFlight - a.dateFlight);\n","export const getUniqYears = (flights) => {\n  const yearsList = flights\n    .map((flight)=>flight.dateFlight.getFullYear());\n  return [...new Set(yearsList)];\n};\n\nexport const getUniqValues = (flights, isYear = false) => {  \n  const list = flights\n    .map((flight)=>{\n      let result;\n      isYear ? result = flight.dateFlight.getFullYear() : result = flight.dateFlight.getMonth();\n      return result;\n    });\n  return [...new Set(list)];\n};\n\nexport const getMonthName = (value) => [`ЯНВ`,`ФЕВ`,`МАР`,`АПР`,`МАЙ`,`ИЮН`,`ИЮЛ`,`АВГ`,`СЕН`,`ОКТ`,`НОЯ`,`ДЕК`][value];\n","import React from 'react';\nimport {defaultName} from '../const';\nimport {getMonthName} from '../utils';\n\nconst Card = (props) =>{\n  const {data, activeYear} = props;  \n\n  const {dateFlight, timeWork, timeFlight, timeBlock} = data;\n\n  return (\n    <ul className=\"main__card card\">\n      <li className=\"card__item\">\n        {activeYear === defaultName ? dateFlight.getFullYear() : getMonthName(dateFlight.getMonth())}\n      </li>\n      <li className=\"card__item\">\n        {timeBlock}\n      </li>\n      <li className=\"card__item\">\n        {timeWork}\n      </li>\n      <li className=\"card__item\">\n        {timeFlight}\n      </li>            \n    </ul>  \n  );\n}\n\nexport default Card;\n","export const defaultName = `Все года`;","import React from 'react';\nimport {flights} from '../mock.js';\nimport Card from './card.jsx';\nimport {getUniqYears} from '../utils';\nimport {getFlightsByActive} from '../reducer';\nimport {defaultName} from '../const';\n\nclass Main extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      value: `Все года`,\n    };\n  }\n\n  render(){\n    return (\n      <main className=\"main\">\n        <h1 className=\"main__title\">\n          Информация по налету командира воздушного судна за \n          {this.state.value === defaultName ? ` всë время` : ` ${this.state.value} год`}\n        </h1>\n        <div className=\"main__input-container\">          \n          <input className=\"main__input\" type=\"checkbox\" id=\"checkbox\"/>\n          <label className=\"main__label\" htmlFor=\"checkbox\">По факту</label>\n        </div>\n        <div className=\"main__container\">\n          <select value={this.state.value} className=\"main__select\" onChange={(e)=>{this.setState({value: e.target.value})}}>\n            <option>\n              {defaultName}\n            </option>\n            {getUniqYears(flights).map((year) => <option key={year}>\n              {year}\n            </option>)}\n          </select>\n          <ul className=\"main__list\">\n          \n            <li className=\"main__item\">\n              TimeBlock\n            </li>\n            <li className=\"main__item\">\n              TimeWork, с\n            </li>\n            <li className=\"main__item\">\n              TimeFlight, с\n            </li>            \n          </ul> \n        </div>\n        {getFlightsByActive(flights, this.state.value).map((data)=>\n        <Card \n          key={data.dateFlight}\n          data={data}\n          activeYear={this.state.value}\n          />)}        \n      </main>\n    );\n  }\n}\n\nexport default Main;\n","import {defaultName} from './const';\nimport {getUniqValues} from './utils.js';\n\n\nexport const getFlightsByActive = (flights, state) => {\n  const flightsCopy = flights.slice();\n  const flightsByYear = flightsCopy.filter((flight)=> flight.dateFlight.getFullYear() === Number(state));\n\n  const getSum = (value, type) => {    \n    const sum = flightsCopy\n    .filter((flight)=> {\n      let result;\n      value > 12 ? result = flight.dateFlight.getFullYear() : result = flight.dateFlight.getMonth();      \n      return result === value;\n    })\n    .map((it)=> it[type])\n    .reduce((a, b)=>{\n      return a + b;\n    });\n    return sum;\n  };\n\n  const getFilteredFlights = (isYear = false) => {\n    let goalArr;\n    isYear ? goalArr = flightsCopy : goalArr = flightsByYear;\n    return Array.from(getUniqValues(goalArr, isYear)).map((value) => {    \n      return {\n        dateFlight: goalArr.find((flight)=> {\n          let result;\n          isYear ? result = flight.dateFlight.getFullYear() : result = flight.dateFlight.getMonth();\n          return result===value;\n        }).dateFlight,\n        timeWork: getSum(value, `timeWork`),\n        timeFlight: getSum(value, `timeFlight`),\n        timeBlock: getSum(value, `timeBlock`),\n      };\n    });\n  };\n\n  if(state === defaultName){\n    return getFilteredFlights(true);\n  }\n  console.log(getFilteredFlights(false))\n  return getFilteredFlights(false).reverse();\n};","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <ul className=\"footer__list\">\n        <li className=\"footer__item\">[Copyright]</li>\n        <li className=\"footer__item\">[Социальные сети]</li>\n        <li className=\"footer__item\">[Адрес]</li>\n      </ul>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport '../sass/app.scss';\nimport '../App.css';\nimport Header from './header';\nimport Main from './main';\nimport Footer from './footer';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Main/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}