{"version":3,"sources":["logo.svg","mock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getRandomInt","min","max","Math","floor","random","count","generateFlight","dateFlight","start","Date","end","getTime","flight","pinType","pin","timeFlight","timeBlock","timeNight","timeBiologicalNight","timeWork","type","takeoff","name","lat","long","landing","mock","Array","fill","map","sort","a","b","Card","props","data","className","getFullYear","App","id","htmlFor","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,kICI3C,SAASC,EAAaC,EAAKC,GACzB,OAAOC,KAAKC,MAAMH,EAAME,KAAKE,UAAYH,EAAM,EAAID,IAGrD,IAAyBK,EAInBC,EAAiB,iBAAO,CAC5BC,YAbqBC,EAaK,IAAIC,KAAK,KAAM,EAAG,GAbhBC,EAaoB,IAAID,KAZ7C,IAAIA,KAAKD,EAAMG,UAAYT,KAAKE,UAAYM,EAAIC,UAAYH,EAAMG,aAazEC,OAAO,QAAD,OAAUb,EAAa,GAAG,KAChCc,QAAQ,SAAD,OAAWd,EAAa,IAAI,MACnCe,IAAI,QACJC,WAAYhB,EAAa,KAAM,MAC/BiB,UAAWjB,EAAa,KAAM,MAC9BkB,UAAWlB,EAAa,KAAM,MAC9BmB,oBAAqBnB,EAAa,KAAM,MACxCoB,SAAUpB,EAAa,KAAM,MAC7BqB,KAAMrB,EAAa,EAAE,GACrBsB,QAAS,CACPC,KAAK,oFAAD,OAAqBvB,EAAa,EAAE,KACxCwB,IAAK,MACLC,KAAM,MAERC,QAAS,CACPH,KAAK,4GACLC,IAAK,YACLC,KAAM,eA/BV,IAAuBhB,EAAOE,GAmCjBgB,GA3BYrB,EA2BW,EA1B3B,IAAIsB,MAAMtB,GAAOuB,KAAjB,IAA0BC,IAAIvB,IA0BAwB,MAAK,SAACC,EAAEC,GAAH,OAAOA,EAAEzB,WAAawB,EAAExB,cC7B9D0B,EAAO,SAACC,GAEZ,IAEOC,EAAQD,EAARC,KACA5B,EAA4C4B,EAA5C5B,WAAYK,EAAgCuB,EAAhCvB,OAAQO,EAAwBgB,EAAxBhB,SAAUJ,EAAcoB,EAAdpB,WAErC,OAAQ,oCAEN,wBAAIqB,UAAU,mBACZ,wBAAIA,UAAU,cACF7B,EAAW8B,eAEvB,wBAAID,UAAU,cACXxB,GAEH,wBAAIwB,UAAU,cACXjB,GAEH,wBAAIiB,UAAU,cACXrB,MAwEMuB,MAjEf,WACE,OACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aAAf,UAGA,yBAAKA,UAAU,aAAf,YAKJ,0BAAMA,UAAU,QACd,wBAAIA,UAAU,eAAd,qQAGA,yBAAKA,UAAU,yBACb,2BAAOA,UAAU,cAAchB,KAAK,WAAWmB,GAAG,aAClD,2BAAOH,UAAU,cAAcI,QAAQ,YAAvC,gDAEF,yBAAKJ,UAAU,mBACb,4BAAQA,UAAU,gBAChB,+EAGA,wCAGA,wCAGA,yCAIF,wBAAIA,UAAU,cAEZ,wBAAIA,UAAU,cAAd,UAGA,wBAAIA,UAAU,cAAd,oBAGA,wBAAIA,UAAU,cAAd,wBAKHV,EAAKG,KAAI,SAACM,GAAD,OACV,kBAAC,EAAD,CACEM,IAAKN,EAAK5B,WACV4B,KAAMA,QAEV,4BAAQC,UAAU,UAChB,wBAAIA,UAAU,gBACZ,wBAAIA,UAAU,gBAAd,eACA,wBAAIA,UAAU,gBAAd,2FACA,wBAAIA,UAAU,gBAAd,wCC/EUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cf4b5ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getRandomDate(start, end) {\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n};\n\nfunction getRandomInt(min, max) {  \n  return Math.floor(min + Math.random() * (max + 1 - min));\n};\n\nconst generateFlights = (count) => {\n  return new Array(count).fill(``).map(generateFlight);\n};\n\nconst generateFlight = () => ({\n  dateFlight: getRandomDate(new Date(2010, 0, 1), new Date()),\n  flight: `AB-33${getRandomInt(10,80)}`,\n  pinType: `B-757-${getRandomInt(100,200)}`,\n  pin: `XXXAK`,\n  timeFlight: getRandomInt(25000,26000),\n  timeBlock: getRandomInt(27000,28000),\n  timeNight: getRandomInt(15000,16000),\n  timeBiologicalNight: getRandomInt(28000,29000),\n  timeWork: getRandomInt(37000,38000),\n  type: getRandomInt(0,1),\n  takeoff: {\n    name: `Томск(Богашево)-${getRandomInt(1,20)}`,\n    lat: 56.55,\n    long: 85.2,\n  },\n  landing: {\n    name: `Нячанг(Камрань Интл)`,\n    lat: 11.99805555,\n    long: 109.21944444,\n  },\n});\n\nexport const mock = generateFlights(5).sort((a,b)=>b.dateFlight - a.dateFlight);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './sass/app.scss';\nimport './App.css';\nimport {mock} from './mock.js';\n\nconst Card = (props) =>{\n\n  const isYear = true;\n\n  const {data} = props;\n  const {dateFlight, flight, timeWork, timeFlight} = data;\n\n  return (<>\n\n    <ul className=\"main__card card\">\n      <li className=\"card__item\">\n        {isYear ? dateFlight.getFullYear() : dateFlight.getMonth()}\n      </li>\n      <li className=\"card__item\">\n        {flight}\n      </li>\n      <li className=\"card__item\">\n        {timeWork}\n      </li>\n      <li className=\"card__item\">\n        {timeFlight}\n      </li>            \n    </ul> \n  </>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <nav className=\"nav\">\n          <div className=\"nav__logo\">\n            [Logo]\n          </div>\n          <div className=\"nav__menu\">\n            [Menu]\n          </div>\n        </nav>\n      </header>\n      <main className=\"main\">\n        <h1 className=\"main__title\">\n          Информация по налету командира воздушного судна\n        </h1>\n        <div className=\"main__input-container\">          \n          <input className=\"main__input\" type=\"checkbox\" id=\"checkbox\"/>\n          <label className=\"main__label\" htmlFor=\"checkbox\">По факту</label>\n        </div>\n        <div className=\"main__container\">\n          <select className=\"main__select\">\n            <option>\n              Все года\n            </option>\n            <option>\n              2020\n            </option>\n            <option>\n              2019\n            </option>\n            <option>\n              2018\n            </option>\n          </select>\n          <ul className=\"main__list\">\n          \n            <li className=\"main__item\">\n              Flight\n            </li>\n            <li className=\"main__item\">\n              TimeWork, с\n            </li>\n            <li className=\"main__item\">\n              TimeFlight, с\n            </li>            \n          </ul> \n        </div>\n        {mock.map((data)=>\n        <Card \n          key={data.dateFlight}\n          data={data}/>)}        \n      </main>\n      <footer className=\"footer\">\n        <ul className=\"footer__list\">\n          <li className=\"footer__item\">[Copyright]</li>\n          <li className=\"footer__item\">[Социальные сети]</li>\n          <li className=\"footer__item\">[Адрес]</li>\n        </ul>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}